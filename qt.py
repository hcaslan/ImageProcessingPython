# -*- coding: utf-8 -*-
"""
Created on Fri May 1 06:37:29 2022

@author: hcaslan
"""

# Form implementation generated from reading ui file 'qt.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog , QMessageBox , QDesktopWidget , QApplication , QInputDialog , QMainWindow , QAction , QWidget
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import pyqtSignal , QObject
from PyQt5.QtGui     import *
import sys
import os
import operations

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1584, 657)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/Logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setAnimated(False)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.sourceGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.sourceGroupBox.setMinimumSize(QtCore.QSize(517, 520))
        self.sourceGroupBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.sourceGroupBox.setFont(font)
        self.sourceGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.sourceGroupBox.setFlat(True)
        self.sourceGroupBox.setObjectName("sourceGroupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.sourceGroupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.sourceButtonsBar = QtWidgets.QGroupBox(self.sourceGroupBox)
        self.sourceButtonsBar.setMaximumSize(QtCore.QSize(650, 215))
        self.sourceButtonsBar.setTitle("")
        self.sourceButtonsBar.setObjectName("sourceButtonsBar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.sourceButtonsBar)
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.pB_openSource = QtWidgets.QPushButton(self.sourceButtonsBar)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pB_openSource.sizePolicy().hasHeightForWidth())
        self.pB_openSource.setSizePolicy(sizePolicy)
        self.pB_openSource.setMinimumSize(QtCore.QSize(155, 24))
        self.pB_openSource.setMaximumSize(QtCore.QSize(155, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_openSource.setFont(font)
        self.pB_openSource.setWhatsThis("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/upload_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_openSource.setIcon(icon3)
        self.pB_openSource.setDefault(True)
        self.pB_openSource.setFlat(False)
        self.pB_openSource.setObjectName("pB_openSource")
        self.horizontalLayout.addWidget(self.pB_openSource)
        
        self.pB_exportAsSource = QtWidgets.QPushButton(self.sourceButtonsBar)
        self.pB_exportAsSource.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pB_exportAsSource.sizePolicy().hasHeightForWidth())
        self.pB_exportAsSource.setSizePolicy(sizePolicy)
        self.pB_exportAsSource.setMinimumSize(QtCore.QSize(155, 24))
        self.pB_exportAsSource.setMaximumSize(QtCore.QSize(155, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_exportAsSource.setFont(font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/export.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_exportAsSource.setIcon(icon2)
        self.pB_exportAsSource.setObjectName("pB_exportAsSource")
        self.horizontalLayout.addWidget(self.pB_exportAsSource)
        
        self.pB_clearSource = QtWidgets.QPushButton(self.sourceButtonsBar)
        self.pB_clearSource.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pB_clearSource.sizePolicy().hasHeightForWidth())
        self.pB_clearSource.setSizePolicy(sizePolicy)
        self.pB_clearSource.setMinimumSize(QtCore.QSize(155, 24))
        self.pB_clearSource.setMaximumSize(QtCore.QSize(155, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_clearSource.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/clear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_clearSource.setIcon(icon1)
        self.pB_clearSource.setObjectName("pB_clearSource")
        self.horizontalLayout.addWidget(self.pB_clearSource)
        
        self.verticalLayout_2.addWidget(self.sourceButtonsBar)
        self.sourceLabel = QtWidgets.QLabel(self.sourceGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sourceLabel.sizePolicy().hasHeightForWidth())
        self.sourceLabel.setSizePolicy(sizePolicy)
        self.sourceLabel.setMinimumSize(QtCore.QSize(497, 429))
        self.sourceLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.sourceLabel.setScaledContents(True)
        self.sourceLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.sourceLabel.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.sourceLabel.setLineWidth(5)
        self.sourceLabel.setText("")
        self.sourceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.sourceLabel.setObjectName("sourceLabel")
        self.verticalLayout_2.addWidget(self.sourceLabel)
        self.gridLayout.addWidget(self.sourceGroupBox, 0, 0, 1, 1)
        self.operationGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.operationGroupBox.setMaximumSize(QtCore.QSize(600, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.operationGroupBox.setFont(font)
        self.operationGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.operationGroupBox.setFlat(True)
        self.operationGroupBox.setObjectName("operationGroupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.operationGroupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.operationsButtonsGroupBox = QtWidgets.QGroupBox(self.operationGroupBox)
        self.operationsButtonsGroupBox.setTitle("")
        self.operationsButtonsGroupBox.setObjectName("operationsButtonsGroupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.operationsButtonsGroupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        self.pB_undo = QtWidgets.QPushButton(self.operationsButtonsGroupBox)
        self.pB_undo.setEnabled(False)
        self.pB_undo.setMinimumSize(QtCore.QSize(156, 24))
        self.pB_undo.setMaximumSize(QtCore.QSize(156, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_undo.setFont(font)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_undo.setIcon(icon5)
        self.pB_undo.setObjectName("pB_undo")
        self.horizontalLayout_2.addWidget(self.pB_undo)
        
        self.pb_clearAll = QtWidgets.QPushButton(self.operationsButtonsGroupBox)
        self.pb_clearAll.setEnabled(False)
        self.pb_clearAll.setMinimumSize(QtCore.QSize(156, 24))
        self.pb_clearAll.setMaximumSize(QtCore.QSize(156, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pb_clearAll.setFont(font)
        self.pb_clearAll.setIcon(icon1)
        self.pb_clearAll.setObjectName("pb_clearAll")
        self.horizontalLayout_2.addWidget(self.pb_clearAll)
        
        self.pB_redo = QtWidgets.QPushButton(self.operationsButtonsGroupBox)
        self.pB_redo.setEnabled(False)
        self.pB_redo.setMinimumSize(QtCore.QSize(156, 24))
        self.pB_redo.setMaximumSize(QtCore.QSize(156, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_redo.setFont(font)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/redo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_redo.setIcon(icon4)
        self.pB_redo.setObjectName("pB_redo")
        self.horizontalLayout_2.addWidget(self.pB_redo)
        
        self.verticalLayout.addWidget(self.operationsButtonsGroupBox)
        self.ConversionGroupBox = QtWidgets.QGroupBox(self.operationGroupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        self.ConversionGroupBox.setFont(font)
        self.ConversionGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.ConversionGroupBox.setObjectName("ConversionGroupBox")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.ConversionGroupBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        self.pB_rgbToGray = QtWidgets.QPushButton(self.ConversionGroupBox)
        self.pB_rgbToGray.setEnabled(False)
        self.pB_rgbToGray.setMinimumSize(QtCore.QSize(236, 48))
        self.pB_rgbToGray.setMaximumSize(QtCore.QSize(236, 48))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        self.pB_rgbToGray.setFont(font)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/rgb2gray3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_rgbToGray.setIcon(icon6)
        self.pB_rgbToGray.setIconSize(QtCore.QSize(24, 24))
        self.pB_rgbToGray.setObjectName("pB_rgbToGray")
        self.horizontalLayout_4.addWidget(self.pB_rgbToGray)
        
        self.pB_rgbToHsv = QtWidgets.QPushButton(self.ConversionGroupBox)
        self.pB_rgbToHsv.setEnabled(False)
        self.pB_rgbToHsv.setMinimumSize(QtCore.QSize(236, 48))
        self.pB_rgbToHsv.setMaximumSize(QtCore.QSize(236, 48))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        self.pB_rgbToHsv.setFont(font)
        self.pB_rgbToHsv.setAcceptDrops(False)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/rgb2hsv.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_rgbToHsv.setIcon(icon7)
        self.pB_rgbToHsv.setIconSize(QtCore.QSize(24, 24))
        self.pB_rgbToHsv.setObjectName("pB_rgbToHsv")
        self.horizontalLayout_4.addWidget(self.pB_rgbToHsv)
        
        self.verticalLayout.addWidget(self.ConversionGroupBox)
        self.SegmentationGroupBox = QtWidgets.QGroupBox(self.operationGroupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        self.SegmentationGroupBox.setFont(font)
        self.SegmentationGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.SegmentationGroupBox.setObjectName("SegmentationGroupBox")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.SegmentationGroupBox)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pB_MOS = QtWidgets.QPushButton(self.SegmentationGroupBox)
        self.pB_MOS.setEnabled(False)
        self.pB_MOS.setMinimumSize(QtCore.QSize(155, 48))
        self.pB_MOS.setMaximumSize(QtCore.QSize(155, 16777215))
        self.pB_MOS.setLayoutDirection(QtCore.Qt.LeftToRight)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons/mot.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_MOS.setIcon(icon8)
        self.pB_MOS.setIconSize(QtCore.QSize(24, 24))
        self.pB_MOS.setObjectName("pB_MOS")
        self.horizontalLayout_5.addWidget(self.pB_MOS)
        
        self.pB_CVS = QtWidgets.QPushButton(self.SegmentationGroupBox)
        self.pB_CVS.setEnabled(False)
        self.pB_CVS.setMinimumSize(QtCore.QSize(155, 48))
        self.pB_CVS.setMaximumSize(QtCore.QSize(155, 48))
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icons/cvs.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_CVS.setIcon(icon9)
        self.pB_CVS.setIconSize(QtCore.QSize(24, 24))
        self.pB_CVS.setObjectName("pB_CVS")
        self.horizontalLayout_5.addWidget(self.pB_CVS)
        
        self.pB_MS = QtWidgets.QPushButton(self.SegmentationGroupBox)
        self.pB_MS.setEnabled(False)
        self.pB_MS.setMinimumSize(QtCore.QSize(155, 48))
        self.pB_MS.setMaximumSize(QtCore.QSize(155, 48))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icons/ms.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_MS.setIcon(icon10)
        self.pB_MS.setIconSize(QtCore.QSize(24, 24))
        self.pB_MS.setObjectName("pB_MS")
        self.horizontalLayout_5.addWidget(self.pB_MS)
        
        self.verticalLayout.addWidget(self.SegmentationGroupBox)
        self.EdgeDetGroupBox = QtWidgets.QGroupBox(self.operationGroupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        self.EdgeDetGroupBox.setFont(font)
        self.EdgeDetGroupBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.EdgeDetGroupBox.setAutoFillBackground(False)
        self.EdgeDetGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.EdgeDetGroupBox.setObjectName("EdgeDetGroupBox")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.EdgeDetGroupBox)
        
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.pB_Roberts = QtWidgets.QPushButton(self.EdgeDetGroupBox)
        self.pB_Roberts.setEnabled(False)
        self.pB_Roberts.setMinimumSize(QtCore.QSize(114, 48))
        self.pB_Roberts.setMaximumSize(QtCore.QSize(114, 48))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("icons/ro.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Roberts.setIcon(icon11)
        self.pB_Roberts.setIconSize(QtCore.QSize(24, 24))
        self.pB_Roberts.setObjectName("pB_Roberts")
        self.horizontalLayout_7.addWidget(self.pB_Roberts)
        
        self.pB_Sobel = QtWidgets.QPushButton(self.EdgeDetGroupBox)
        self.pB_Sobel.setEnabled(False)
        self.pB_Sobel.setMinimumSize(QtCore.QSize(114, 48))
        self.pB_Sobel.setMaximumSize(QtCore.QSize(114, 48))
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("icons/so.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Sobel.setIcon(icon12)
        self.pB_Sobel.setIconSize(QtCore.QSize(24, 24))
        self.pB_Sobel.setObjectName("pB_Sobel")
        self.horizontalLayout_7.addWidget(self.pB_Sobel)
        
        self.pB_Scharr = QtWidgets.QPushButton(self.EdgeDetGroupBox)
        self.pB_Scharr.setEnabled(False)
        self.pB_Scharr.setMinimumSize(QtCore.QSize(114, 48))
        self.pB_Scharr.setMaximumSize(QtCore.QSize(114, 48))
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("icons/sch.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Scharr.setIcon(icon13)
        self.pB_Scharr.setIconSize(QtCore.QSize(24, 24))
        self.pB_Scharr.setObjectName("pB_Scharr")
        self.horizontalLayout_7.addWidget(self.pB_Scharr)
        
        self.pB_Previtt = QtWidgets.QPushButton(self.EdgeDetGroupBox)
        self.pB_Previtt.setEnabled(False)
        self.pB_Previtt.setMinimumSize(QtCore.QSize(114, 48))
        self.pB_Previtt.setMaximumSize(QtCore.QSize(114, 48))
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("icons/pr.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Previtt.setIcon(icon14)
        self.pB_Previtt.setIconSize(QtCore.QSize(24, 24))
        self.pB_Previtt.setObjectName("pB_Previtt")
        self.horizontalLayout_7.addWidget(self.pB_Previtt)
        
        self.verticalLayout.addWidget(self.EdgeDetGroupBox)
        self.gridLayout.addWidget(self.operationGroupBox, 0, 1, 1, 1)
        self.outputGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.outputGroupBox.setMinimumSize(QtCore.QSize(517, 520))
        self.outputGroupBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.outputGroupBox.setFont(font)
        self.outputGroupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.outputGroupBox.setFlat(True)
        self.outputGroupBox.setObjectName("outputGroupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.outputGroupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.outputButtonsBar = QtWidgets.QGroupBox(self.outputGroupBox)
        self.outputButtonsBar.setMaximumSize(QtCore.QSize(650, 215))
        self.outputButtonsBar.setTitle("")
        self.outputButtonsBar.setObjectName("outputButtonsBar")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.outputButtonsBar)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pB_saveOutput = QtWidgets.QPushButton(self.outputButtonsBar)
        self.pB_saveOutput.setEnabled(False)
        self.pB_saveOutput.setMinimumSize(QtCore.QSize(122, 24))
        self.pB_saveOutput.setMaximumSize(QtCore.QSize(122, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_saveOutput.setFont(font)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_saveOutput.setIcon(icon15)
        self.pB_saveOutput.setObjectName("pB_saveOutput")
        self.horizontalLayout_3.addWidget(self.pB_saveOutput)
        
        self.pB_saveAsOutput = QtWidgets.QPushButton(self.outputButtonsBar)
        self.pB_saveAsOutput.setEnabled(False)
        self.pB_saveAsOutput.setMinimumSize(QtCore.QSize(122, 24))
        self.pB_saveAsOutput.setMaximumSize(QtCore.QSize(122, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_saveAsOutput.setFont(font)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("icons/save_as.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_saveAsOutput.setIcon(icon16)
        self.pB_saveAsOutput.setObjectName("pB_saveAsOutput")
        self.horizontalLayout_3.addWidget(self.pB_saveAsOutput)
        
        self.pB_exportAsOutput = QtWidgets.QPushButton(self.outputButtonsBar)
        self.pB_exportAsOutput.setEnabled(False)
        self.pB_exportAsOutput.setMinimumSize(QtCore.QSize(122, 24))
        self.pB_exportAsOutput.setMaximumSize(QtCore.QSize(122, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_exportAsOutput.setFont(font)
        self.pB_exportAsOutput.setIcon(icon2)
        self.pB_exportAsOutput.setObjectName("pB_exportAsOutput")
        self.horizontalLayout_3.addWidget(self.pB_exportAsOutput)
        
        self.pB_clearOutput = QtWidgets.QPushButton(self.outputButtonsBar)
        self.pB_clearOutput.setEnabled(False)
        self.pB_clearOutput.setMinimumSize(QtCore.QSize(122, 24))
        self.pB_clearOutput.setMaximumSize(QtCore.QSize(122, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.pB_clearOutput.setFont(font)
        self.pB_clearOutput.setIcon(icon1)
        self.pB_clearOutput.setObjectName("pB_clearOutput")
        self.horizontalLayout_3.addWidget(self.pB_clearOutput)
        
        self.verticalLayout_3.addWidget(self.outputButtonsBar)
        self.outputLabel = QtWidgets.QLabel(self.outputGroupBox)
        self.outputLabel.setMinimumSize(QtCore.QSize(497, 429))
        self.outputLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.outputLabel.setScaledContents(True)
        self.outputLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.outputLabel.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.outputLabel.setLineWidth(5)
        self.outputLabel.setText("")
        self.outputLabel.setObjectName("outputLabel")
        self.verticalLayout_3.addWidget(self.outputLabel)
        self.gridLayout.addWidget(self.outputGroupBox, 0, 2, 1, 1)
        
        self.output2sourceGroupBox = QtWidgets.QFrame(self.centralwidget)
        self.output2sourceGroupBox.setMaximumSize(QtCore.QSize(16777215, 70))
        self.output2sourceGroupBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.output2sourceGroupBox.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.output2sourceGroupBox.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output2sourceGroupBox.setObjectName("output2sourceGroupBox")
        self._2 = QtWidgets.QHBoxLayout(self.output2sourceGroupBox)
        self._2.setSpacing(6)
        self._2.setObjectName("_2")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self._2.addItem(spacerItem)
        self.output2sourceLabel = QtWidgets.QLabel(self.output2sourceGroupBox)
        self.output2sourceLabel.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.output2sourceLabel.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.output2sourceLabel.setLineWidth(5)
        self.output2sourceLabel.setText("")
        self.output2sourceLabel.setEnabled(False)
        self.output2sourceLabel.setPixmap(QtGui.QPixmap("icons/Union.png"))
        self.output2sourceLabel.setScaledContents(False)
        self.output2sourceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.output2sourceLabel.setObjectName("output2sourceLabel")
        self._2.addWidget(self.output2sourceLabel)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self._2.addItem(spacerItem1)
        self.gridLayout.addWidget(self.output2sourceGroupBox, 1, 0, 1, 3)
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1584, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuExports_As = QtWidgets.QMenu(self.menuFile)
        self.menuExports_As.setEnabled(True)
        self.menuExports_As.setIcon(icon2)
        self.menuExports_As.setObjectName("menuExports_As")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setEnabled(True)
        self.menuEdit.setObjectName("menuEdit")
        self.menuClear = QtWidgets.QMenu(self.menuEdit)
        self.menuClear.setEnabled(True)
        self.menuClear.setGeometry(QtCore.QRect(355, 173, 126, 116))
        self.menuClear.setIcon(icon1)
        self.menuClear.setObjectName("menuClear")
        self.menuConversion = QtWidgets.QMenu(self.menubar)
        self.menuConversion.setEnabled(False)
        self.menuConversion.setObjectName("menuConversion")
        self.menuSegmentation = QtWidgets.QMenu(self.menubar)
        self.menuSegmentation.setEnabled(False)
        self.menuSegmentation.setObjectName("menuSegmentation")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menubar)
        self.menuEdge_Detection.setEnabled(False)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_Source = QtWidgets.QAction(MainWindow)
        self.actionOpen_Source.setIcon(icon3)
        self.actionOpen_Source.setObjectName("actionOpen_Source")
        self.actionSave_Output = QtWidgets.QAction(MainWindow)
        self.actionSave_Output.setEnabled(False)
        self.actionSave_Output.setIcon(icon15)
        self.actionSave_Output.setObjectName("actionSave_Output")
        self.actionSave_As_Output = QtWidgets.QAction(MainWindow)
        self.actionSave_As_Output.setEnabled(False)
        self.actionSave_As_Output.setIcon(icon16)
        self.actionSave_As_Output.setObjectName("actionSave_As_Output")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setEnabled(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("icons/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon17)
        self.actionExit.setObjectName("actionExit")
        self.actionSource = QtWidgets.QAction(MainWindow)
        self.actionSource.setEnabled(False)
        self.actionSource.setIcon(icon2)
        self.actionSource.setObjectName("actionSource")
        self.actionOutput = QtWidgets.QAction(MainWindow)
        self.actionOutput.setEnabled(False)
        self.actionOutput.setIcon(icon2)
        self.actionOutput.setObjectName("actionOutput")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        self.actionUndo.setEnabled(False)
        self.actionUndo.setIcon(icon5)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(MainWindow)
        self.actionRedo.setEnabled(False)
        self.actionRedo.setIcon(icon4)
        self.actionRedo.setObjectName("actionRedo")
        self.actionAll = QtWidgets.QAction(MainWindow)
        self.actionAll.setEnabled(False)
        self.actionAll.setObjectName("actionAll")
        self.actionSource_2 = QtWidgets.QAction(MainWindow)
        self.actionSource_2.setEnabled(False)
        self.actionSource_2.setObjectName("actionSource_2")
        self.actionOutput_2 = QtWidgets.QAction(MainWindow)
        self.actionOutput_2.setEnabled(False)
        self.actionOutput_2.setObjectName("actionOutput_2")
        self.actionRGB_to_Grayscale = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_Grayscale.setEnabled(True)
        self.actionRGB_to_Grayscale.setObjectName("actionRGB_to_Grayscale")
        self.actionRGB_to_HSV = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_HSV.setEnabled(True)
        self.actionRGB_to_HSV.setObjectName("actionRGB_to_HSV")
        self.actionMulti_Otsu_Th = QtWidgets.QAction(MainWindow)
        self.actionMulti_Otsu_Th.setEnabled(True)
        self.actionMulti_Otsu_Th.setIcon(icon8)
        self.actionMulti_Otsu_Th.setObjectName("actionMulti_Otsu_Th")
        self.actionChan_Vese_Seg = QtWidgets.QAction(MainWindow)
        self.actionChan_Vese_Seg.setEnabled(True)
        self.actionChan_Vese_Seg.setIcon(icon9)
        self.actionChan_Vese_Seg.setObjectName("actionChan_Vese_Seg")
        self.actionMorphological_Snakes = QtWidgets.QAction(MainWindow)
        self.actionMorphological_Snakes.setEnabled(True)
        self.actionMorphological_Snakes.setIcon(icon10)
        self.actionMorphological_Snakes.setObjectName("actionMorphological_Snakes")
        self.actionRoberts = QtWidgets.QAction(MainWindow)
        self.actionRoberts.setEnabled(True)
        self.actionRoberts.setIcon(icon11)
        self.actionRoberts.setObjectName("actionRoberts")
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setEnabled(True)
        self.actionSobel.setIcon(icon12)
        self.actionSobel.setObjectName("actionSobel")
        self.actionScharr = QtWidgets.QAction(MainWindow)
        self.actionScharr.setEnabled(True)
        self.actionScharr.setIcon(icon13)
        self.actionScharr.setObjectName("actionScharr")
        self.actionPrewitt = QtWidgets.QAction(MainWindow)
        self.actionPrewitt.setEnabled(True)
        self.actionPrewitt.setIcon(icon14)
        self.actionPrewitt.setObjectName("actionPrewitt")
        self.menuExports_As.addAction(self.actionSource)
        self.menuExports_As.addAction(self.actionOutput)
        self.menuFile.addAction(self.actionOpen_Source)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Output)
        self.menuFile.addAction(self.actionSave_As_Output)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuExports_As.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuClear.addAction(self.actionAll)
        self.menuClear.addAction(self.actionSource_2)
        self.menuClear.addAction(self.actionOutput_2)
        self.menuEdit.addAction(self.menuClear.menuAction())
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuConversion.addAction(self.actionRGB_to_Grayscale)
        self.menuConversion.addSeparator()
        self.menuConversion.addAction(self.actionRGB_to_HSV)
        self.menuSegmentation.addAction(self.actionMulti_Otsu_Th)
        self.menuSegmentation.addSeparator()
        self.menuSegmentation.addAction(self.actionChan_Vese_Seg)
        self.menuSegmentation.addSeparator()
        self.menuSegmentation.addAction(self.actionMorphological_Snakes)
        self.menuEdge_Detection.addAction(self.actionRoberts)
        self.menuEdge_Detection.addSeparator()
        self.menuEdge_Detection.addAction(self.actionSobel)
        self.menuEdge_Detection.addSeparator()
        self.menuEdge_Detection.addAction(self.actionScharr)
        self.menuEdge_Detection.addSeparator()
        self.menuEdge_Detection.addAction(self.actionPrewitt)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuConversion.menuAction())
        self.menubar.addAction(self.menuSegmentation.menuAction())
        self.menubar.addAction(self.menuEdge_Detection.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

    def retranslateUi(self, MainWindow):
        self.op = operations.Operations()
        _translate = QtCore.QCoreApplication.translate
        
        ##TEXTS and ShortCuts
        
        #window title
        MainWindow.setWindowTitle(_translate("MainWindow", "Heval Can Aslan ÖZEN-151220172030"))
        
        #group box titles
        self.operationGroupBox.setTitle(_translate("MainWindow", "Operations"))
        self.ConversionGroupBox.setTitle(_translate("MainWindow", "Conversion"))
        self.SegmentationGroupBox.setTitle(_translate("MainWindow", "Segmentation"))
        self.EdgeDetGroupBox.setTitle(_translate("MainWindow", "Edge Detection"))
        self.outputGroupBox.setTitle(_translate("MainWindow", "Output"))
        self.sourceGroupBox.setTitle(_translate("MainWindow", "Source"))
        
        #Button clearSource
        self.pB_clearSource.setToolTip(_translate("MainWindow", "Clear"))
        self.pB_clearSource.setStatusTip(_translate("MainWindow", "Clear the Source"))
        self.pB_clearSource.setText(_translate("MainWindow", "Clear"))
        
        #Button exportAsSource
        self.pB_exportAsSource.setToolTip(_translate("MainWindow", "Export As"))
        self.pB_exportAsSource.setStatusTip(_translate("MainWindow", "Export As the Source"))
        self.pB_exportAsSource.setText(_translate("MainWindow", "Export As"))
        
        #Button openSource
        self.pB_openSource.setToolTip(_translate("MainWindow", "Open Source"))
        self.pB_openSource.setStatusTip(_translate("MainWindow", "Open Source from file"))
        self.pB_openSource.setText(_translate("MainWindow", "Open Source"))
        
        #Button redo
        self.pB_redo.setToolTip(_translate("MainWindow", "Redo"))
        self.pB_redo.setStatusTip(_translate("MainWindow", "Apply last undone operation"))
        self.pB_redo.setText(_translate("MainWindow", "Redo"))
        
        self.pb_clearAll.setToolTip(_translate("MainWindow", "Clear"))
        self.pb_clearAll.setStatusTip(_translate("MainWindow", "Clear bouth output and source"))
        self.pb_clearAll.setText(_translate("MainWindow", "Clear"))
        
        #Button undo
        self.pB_undo.setToolTip(_translate("MainWindow", "Undo"))
        self.pB_undo.setStatusTip(_translate("MainWindow", "Undo last operation "))
        self.pB_undo.setText(_translate("MainWindow", "Undo"))
        
        #Button rgbToGray
        self.pB_rgbToGray.setToolTip(_translate("MainWindow", "RGB to GS"))
        self.pB_rgbToGray.setStatusTip(_translate("MainWindow", "Conversion from RGB to GrayScale"))
        self.pB_rgbToGray.setText(_translate("MainWindow", "RGB to GrayScale"))
        
        #Button rgbToHsv
        self.pB_rgbToHsv.setToolTip(_translate("MainWindow", "RGB to HSV"))
        self.pB_rgbToHsv.setStatusTip(_translate("MainWindow", "Conversion from RGB to HSV"))
        self.pB_rgbToHsv.setText(_translate("MainWindow", "RGB to HSV"))
        
        #Button MOS
        self.pB_MOS.setToolTip(_translate("MainWindow", "MOT"))
        self.pB_MOS.setStatusTip(_translate("MainWindow", "Ulti-Otsu Thresholding Segmentation"))
        self.pB_MOS.setText(_translate("MainWindow", "  Multi-Otsu\n"
"Thresholding"))
        
        #Button CVS
        self.pB_CVS.setToolTip(_translate("MainWindow", "CVS"))
        self.pB_CVS.setStatusTip(_translate("MainWindow", "Chan-Vese Segmentation"))
        self.pB_CVS.setText(_translate("MainWindow", "  Chan-Vese\n"
"Segmentation"))
        
        #Button MS
        self.pB_MS.setToolTip(_translate("MainWindow", "MS"))
        self.pB_MS.setStatusTip(_translate("MainWindow", "Morphological Snakes Segmentation"))
        self.pB_MS.setText(_translate("MainWindow", "Morphological\n"
"       Snakes"))
    
        #Button Roberts
        self.pB_Roberts.setToolTip(_translate("MainWindow", "Roberts"))
        self.pB_Roberts.setStatusTip(_translate("MainWindow", "Roberts Edge Detection"))
        self.pB_Roberts.setText(_translate("MainWindow", "Roberts"))
        
        #Button Sobel
        self.pB_Sobel.setToolTip(_translate("MainWindow", "Sobel"))
        self.pB_Sobel.setStatusTip(_translate("MainWindow", "Sobel Edge Detection"))
        self.pB_Sobel.setText(_translate("MainWindow", "Sobel"))
        
        #Button Scharr
        self.pB_Scharr.setToolTip(_translate("MainWindow", "Scharr"))
        self.pB_Scharr.setStatusTip(_translate("MainWindow", "Scharr Edge Detection"))
        self.pB_Scharr.setText(_translate("MainWindow", "Scharr"))
        
        #Button Previtt
        self.pB_Previtt.setToolTip(_translate("MainWindow", "Prewitt"))
        self.pB_Previtt.setStatusTip(_translate("MainWindow", "Prewitt Edge Detection"))
        self.pB_Previtt.setText(_translate("MainWindow", "Prewitt"))
        
        #Button
        self.pB_saveOutput.setToolTip(_translate("MainWindow", "Save"))
        self.pB_saveOutput.setStatusTip(_translate("MainWindow", "Save the Output"))
        self.pB_saveOutput.setText(_translate("MainWindow", "Save"))
        
        #Button saveAsOutput
        self.pB_saveAsOutput.setToolTip(_translate("MainWindow", "Save As"))
        self.pB_saveAsOutput.setStatusTip(_translate("MainWindow", "Save As the Output"))
        self.pB_saveAsOutput.setText(_translate("MainWindow", "Save As"))
        
        #Button exportAsOutput
        self.pB_exportAsOutput.setToolTip(_translate("MainWindow", "Export As"))
        self.pB_exportAsOutput.setStatusTip(_translate("MainWindow", "Export As the Output"))
        self.pB_exportAsOutput.setText(_translate("MainWindow", "Export As"))
        
        #Button clearOutput
        self.pB_clearOutput.setToolTip(_translate("MainWindow", "Clear"))
        self.pB_clearOutput.setStatusTip(_translate("MainWindow", "Clear the Output"))
        self.pB_clearOutput.setText(_translate("MainWindow", "Clear"))
        
        #menu titles
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuExports_As.setTitle(_translate("MainWindow", "Exports As "))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))
        self.menuConversion.setTitle(_translate("MainWindow", "Conversion"))
        self.menuSegmentation.setTitle(_translate("MainWindow", "Segmentation"))
        self.menuEdge_Detection.setTitle(_translate("MainWindow", "Edge Detection"))
         
        #Action Open_Source
        self.actionOpen_Source.setText(_translate("MainWindow", "Open Source"))
        self.actionOpen_Source.setStatusTip(_translate("MainWindow", "Open Source from file"))
        self.actionOpen_Source.setShortcut(_translate("MainWindow", "Ctrl+O"))
        
        #Action Save_Output
        self.actionSave_Output.setText(_translate("MainWindow", "Save Output"))
        self.actionSave_Output.setStatusTip(_translate("MainWindow", "Save the Output"))
        self.actionSave_Output.setShortcut(_translate("MainWindow", "Ctrl+S"))
        
        #Action Save_As_Output
        self.actionSave_As_Output.setText(_translate("MainWindow", "Save As Output"))
        self.actionSave_As_Output.setStatusTip(_translate("MainWindow", "Save As the Output"))
        self.actionSave_As_Output.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
 
        #Action Exit
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setStatusTip(_translate("MainWindow", "Exit from application"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        
        #Action Source (ExportAsSource)
        self.actionSource.setText(_translate("MainWindow", "Source"))
        self.actionSource.setStatusTip(_translate("MainWindow", "Export As the Source"))
        self.actionSource.setShortcut(_translate("MainWindow", "Ctrl+E"))
        
        #Action Output (ExportAsOutput)
        self.actionOutput.setText(_translate("MainWindow", "Output"))
        self.actionOutput.setStatusTip(_translate("MainWindow", "Export As the Output"))
        self.actionOutput.setShortcut(_translate("MainWindow", "Ctrl+Shift+E"))
        
        #Action Undo
        self.actionUndo.setText(_translate("MainWindow", "Undo"))
        self.actionUndo.setStatusTip(_translate("MainWindow", "Undo last operation"))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        
        #Action Redo
        self.actionRedo.setText(_translate("MainWindow", "Redo"))
        self.actionRedo.setStatusTip(_translate("MainWindow", "Apply last undone operation"))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+Shift+Z"))
        
        #Action All (ClearALL)
        self.actionAll.setText(_translate("MainWindow", "All"))
        self.actionAll.setStatusTip(_translate("MainWindow", "Clear bouth output and source"))
        self.actionAll.setShortcut(_translate("MainWindow", "Del"))
        
        #Action Source_2 (ClearSource)
        self.actionSource_2.setText(_translate("MainWindow", "Source"))
        self.actionSource_2.setStatusTip(_translate("MainWindow", "Clear the Source"))
        self.actionSource_2.setShortcut(_translate("MainWindow", "Ctrl+L"))
        
        #Action Output_2 (ClearOutput)
        self.actionOutput_2.setText(_translate("MainWindow", "Output"))
        self.actionOutput_2.setStatusTip(_translate("MainWindow", "Clear the Output"))
        self.actionOutput_2.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))
        
        #Action RGB_to_Grayscale
        self.actionRGB_to_Grayscale.setText(_translate("MainWindow", "RGB to Grayscale"))
        self.actionRGB_to_Grayscale.setStatusTip(_translate("MainWindow", "Conversion from RGB to GrayScale"))
        self.actionRGB_to_Grayscale.setShortcut(_translate("MainWindow", "Ctrl+G"))
        
        #Action RGB_to_HSV
        self.actionRGB_to_HSV.setText(_translate("MainWindow", "RGB to HSV"))
        self.actionRGB_to_HSV.setStatusTip(_translate("MainWindow", "Conversion from RGB to HSV"))
        self.actionRGB_to_HSV.setShortcut(_translate("MainWindow", "Ctrl+H"))
        
        #Action Multi_Otsu_Th
        self.actionMulti_Otsu_Th.setText(_translate("MainWindow", "Multi-Otsu Thresholding"))
        self.actionMulti_Otsu_Th.setStatusTip(_translate("MainWindow", "Multi-Otsu Thresholding Segmentation"))
        self.actionMulti_Otsu_Th.setShortcut(_translate("MainWindow", "Ctrl+M"))
        
        #Action Chan_Vese_Seg
        self.actionChan_Vese_Seg.setText(_translate("MainWindow", "Chan-Vese Segmentation"))
        self.actionChan_Vese_Seg.setStatusTip(_translate("MainWindow", "Chan-Vese Segmentation"))
        self.actionChan_Vese_Seg.setShortcut(_translate("MainWindow", "Ctrl+C"))
        
        #Action Morphological_Snakes
        self.actionMorphological_Snakes.setText(_translate("MainWindow", "Morphological Snakes"))
        self.actionMorphological_Snakes.setStatusTip(_translate("MainWindow", "Morphological Snakes Segmentation"))
        self.actionMorphological_Snakes.setShortcut(_translate("MainWindow", "Ctrl+Shift+M"))
        
        #Action Roberts
        self.actionRoberts.setText(_translate("MainWindow", "Roberts"))
        self.actionRoberts.setStatusTip(_translate("MainWindow", "Roberts Edge Detection"))
        self.actionRoberts.setShortcut(_translate("MainWindow", "Ctrl+R"))
        
        #Action Sobel
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionSobel.setStatusTip(_translate("MainWindow", "Sobel Edge Detection"))
        self.actionSobel.setShortcut(_translate("MainWindow", "Ctrl+D"))
        
        #Action Scharr
        self.actionScharr.setText(_translate("MainWindow", "Scharr"))
        self.actionScharr.setStatusTip(_translate("MainWindow", "Scharr Edge Detection"))
        self.actionScharr.setShortcut(_translate("MainWindow", "Ctrl+Shift+D"))
        
        #Action Prewitt
        self.actionPrewitt.setText(_translate("MainWindow", "Prewitt"))
        self.actionPrewitt.setStatusTip(_translate("MainWindow", "Prewitt Edge Detection"))
        self.actionPrewitt.setShortcut(_translate("MainWindow", "Ctrl+P"))
        
        self.output2sourceLabel.setStatusTip(_translate("MainWindow", "Use the output image as a source"))
        
        ##Connections
        #open source
        self.actionOpen_Source.triggered.connect(lambda: self.op.open_source(self))
        self.pB_openSource.clicked.connect(lambda: self.op.open_source(self))
       
        #save output
        self.actionSave_Output.triggered.connect(lambda: self.op.saveOutputImage(self))
        self.pB_saveOutput.clicked.connect(lambda: self.op.saveOutputImage(self))
        
        #RGB to Grayscale
        self.actionRGB_to_Grayscale.triggered.connect(lambda: self.op.rgb2gray(self))
        self.pB_rgbToGray.clicked.connect(lambda: self.op.rgb2gray(self))
        
        #RGB to HSV
        self.actionRGB_to_HSV.triggered.connect(lambda: self.op.rgb2hsv(self))
        self.pB_rgbToHsv.clicked.connect(lambda: self.op.rgb2hsv(self))
        
        #Multi-Otsu Thresholding
        self.actionMulti_Otsu_Th.triggered.connect(lambda: self.op.multiOtsuThresholding(self))
        self.pB_MOS.clicked.connect(lambda: self.op.multiOtsuThresholding(self))
        
        #Chan-Vese Segmentation
        self.actionChan_Vese_Seg.triggered.connect(lambda: self.op.chanVeseSegmentation(self))
        self.pB_CVS.clicked.connect(lambda: self.op.chanVeseSegmentation(self))
        
        #Morphological Snakes
        self.actionMorphological_Snakes.triggered.connect(lambda: self.op.morphologicalSnakes(self))
        self.pB_MS.clicked.connect(lambda:self.op.morphologicalSnakes(self))
        
        #Roberts
        self.actionRoberts.triggered.connect(lambda: self.op.roberts(self))
        self.pB_Roberts.clicked.connect(lambda: self.op.roberts(self))
        
        #Sobel
        self.actionSobel.triggered.connect(lambda: self.op.sobel(self))
        self.pB_Sobel.clicked.connect(lambda: self.op.sobel(self))
        
        #Scharr
        self.actionScharr.triggered.connect(lambda: self.op.scharr(self))
        self.pB_Scharr.clicked.connect(lambda: self.op.scharr(self))
        
        #Prewitt
        self.actionPrewitt.triggered.connect(lambda: self.op.prewitt(self))
        self.pB_Previtt.clicked.connect(lambda: self.op.prewitt(self))
        
        #Save as Output
        self.actionSave_As_Output.triggered.connect(lambda: self.op.saveAsOutputImage(self))
        self.pB_saveAsOutput.clicked.connect(lambda: self.op.saveAsOutputImage(self))
        
        #clear the Output
        self.actionOutput_2.triggered.connect(lambda: self.op.clearOutput(self))
        self.pB_clearOutput.clicked.connect(lambda: self.op.clearOutput(self))
        self.actionAll.triggered.connect(lambda: self.op.clearOutput(self))
        self.pb_clearAll.clicked.connect(lambda: self.op.clearOutput(self))
        
        #clear the Source
        self.actionSource_2.triggered.connect(lambda: self.op.clearSource(self))
        self.pB_clearSource.clicked.connect(lambda: self.op.clearSource(self))
        self.actionAll.triggered.connect(lambda: self.op.clearSource(self))
        self.pb_clearAll.clicked.connect(lambda: self.op.clearSource(self))
        
        #export as Output
        self.actionOutput.triggered.connect(lambda: self.op.exportAsOutputImage(self))
        self.pB_exportAsOutput.clicked.connect(lambda: self.op.exportAsOutputImage(self))
        
        #export as Source
        self.actionSource.triggered.connect(lambda: self.op.exportAsSourceImage(self))
        self.pB_exportAsSource.clicked.connect(lambda: self.op.exportAsSourceImage(self))
        
        #undo
        self.actionUndo.triggered.connect(lambda: self.op.undo(self))
        self.pB_undo.clicked.connect(lambda: self.op.undo(self))
        
        #redo
        self.actionRedo.triggered.connect(lambda: self.op.redo(self))
        self.pB_redo.clicked.connect(lambda: self.op.redo(self))

        #output to source
        self.output2sourceLabel.mousePressEvent = self.output2source
        
        #action exit
        self.actionExit.triggered.connect(lambda: self.op.exitEvent(self,MainWindow)) 
    
##It allows to use the image in the output as a source.
    def output2source(self,event):
        print("clicked")
        self.sourceLabel.setPixmap(QPixmap('icons/tempOutput.jpg'))
        self.op.setSourceImage(self.op.getOutputImage())
        self.op.history.clear()
        self.op.history.append('first_operation')
        self.op.history_position = 0
        print(self.op.history)

        
        
        